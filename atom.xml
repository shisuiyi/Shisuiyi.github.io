<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://Shisuiyi.github.io</id>
    <title>师不予-博客</title>
    <updated>2021-10-11T12:21:43.729Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://Shisuiyi.github.io"/>
    <link rel="self" href="https://Shisuiyi.github.io/atom.xml"/>
    <subtitle>&lt;font color=#6495ED size=2 &gt;小小Tester的学习历程&lt;/font&gt;
</subtitle>
    <logo>https://Shisuiyi.github.io/images/avatar.png</logo>
    <icon>https://Shisuiyi.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 师不予-博客</rights>
    <entry>
        <title type="html"><![CDATA[python 基本数据类型 ·中]]></title>
        <id>https://Shisuiyi.github.io/YUhEQmZeL/</id>
        <link href="https://Shisuiyi.github.io/YUhEQmZeL/">
        </link>
        <updated>2021-10-10T01:50:10.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-序列类型">一、序列类型</h2>
<p>序列类型用来表示有序的元素集合。</p>
<h3 id="1-字符串">1. 字符串</h3>
<p>python 中字符串用 str 表示，字符串是使用单引号，双引号，三引号包裹起来的字符的序列，用来表示文本信息。</p>
<h4 id="11-字符串的定义">1.1 字符串的定义</h4>
<pre><code class="language-python">a = 'a'
b = &quot;bc&quot;
c = &quot;&quot;&quot;hello,world&quot;&quot;&quot;
d = '''hello,d'''
e = &quot;&quot;&quot;
    hello,
    world!
    &quot;&quot;&quot;
print('a的类型为：', type(a))    # a的类型为： &lt;class 'str'&gt;
print('b的类型为：', type(b))    # b的类型为： &lt;class 'str'&gt;
print('c的类型为：', type(c))    # c的类型为： &lt;class 'str'&gt;
print('d的类型为：', type(d))    # d的类型为： &lt;class 'str'&gt;
print('e的类型为：', type(e))    # e的类型为： &lt;class 'str'&gt;
</code></pre>
<p>a 的类型为： &lt;class 'str'&gt;<br>
b 的类型为： &lt;class 'str'&gt;<br>
c 的类型为： &lt;class 'str'&gt;<br>
d 的类型为： &lt;class 'str'&gt;<br>
e 的类型为： &lt;class 'str'&gt;<br>
使用单引号和双引号进行字符串定义没有任何区别，当要表示字符串的单引号时用双引号进行定义字符串，反之亦然。</p>
<p>一对单引号或双引号只能创建单行字符串，三引号可以创建多行表示的字符串。三双引号一般用来做多行注释，表示函数，类定义时的说明。</p>
<pre><code class="language-python">print('最近我看了&quot;平凡的世界&quot;')
print(&quot;最近我看了'平凡的世界'&quot;)
</code></pre>
<p>最近我看了&quot;平凡的世界&quot;<br>
最近我看了'平凡的世界'</p>
<h5 id="定义空字符串">定义空字符串</h5>
<pre><code class="language-python">a = ''
print(a)
</code></pre>
<h4 id="12-字符串的索引">1.2 字符串的索引</h4>
<p>任何序列类型中的元素都有 <code>索引</code> 用来表示它在序列中的位置。</p>
<p>字符串是字符的序列表示，单个字符在字符串中的位置使用 <code>索引</code> 来表示，也叫下标。</p>
<p>索引使用整数来表示。<br>
<img src="https://Shisuiyi.github.io/post-images/1633842875466.png" alt="" loading="lazy"></p>
<p>通过 <code>索引</code> 可以获取字符串中的单个字符</p>
<p>语法如下：</p>
<pre><code class="language-python">str[index]
s = 'hello world!'
print(s[0])
print(s[-1])
</code></pre>
<p>h<br>
!<br>
注意字符串索引从 0 开始</p>
<h4 id="13-字符串的切片">1.3 字符串的切片</h4>
<p>获取序列中的子序列叫切片。</p>
<p>字符串的切片就是获取字符串的子串。</p>
<p>字符串切片的语法如下：</p>
<pre><code class="language-python">str[start:end:step]
</code></pre>
<p><code>start</code> 表示起始索引，<code>end</code> 表示结束索引，<code>step</code> 表示步长。</p>
<p><code>str[m:n:t]</code> 表示从字符串索引为 <code>m</code> 到 <code>n</code> 之间不包含 <code>n</code> 每隔 <code>t</code> 个字符进行切片。</p>
<p>当 <code>step</code> 为 1 的时候可以省略。</p>
<p>特别的，当 <code>step</code> 为负数时，表示反向切片。</p>
<pre><code class="language-python">s = '0123456789'
print(s[1:5])  # 包头不包尾
</code></pre>
<p>1234</p>
<pre><code class="language-python">print(s[:5])  # 从头开始切可以省略start
</code></pre>
<p>01234</p>
<pre><code class="language-python">print(s[1:])  # 切到末尾省略end
</code></pre>
<p>123456789</p>
<pre><code class="language-python">print(s[1::2]) # 步长为2进行切片
</code></pre>
<p>13579</p>
<pre><code class="language-python">print(s[1::-2]) # 步长为负数反向切片
</code></pre>
<p>1</p>
<h5 id="思考">思考</h5>
<p>获取一个字符串的逆串，例如 <code>'abc'</code> 的逆串是 <code>'cba'</code>。</p>
<pre><code class="language-python">w=&quot;abc&quot;
print(w[::-1])
</code></pre>
<h4 id="14-字符串拼接">1.4 字符串拼接</h4>
<p>python 中可以通过 <code>+</code> 拼接两个字符串</p>
<pre><code class="language-python">a = 'hello'
b = ' '
c = 'world!'
print(a+b+c)
</code></pre>
<p>hello world!<br>
字符串和整数进行乘法运算表示重复拼接这个字符串</p>
<pre><code class="language-python">print('*' * 10)
</code></pre>
<hr>
<h4 id="15-字符串常用方法">1.5 字符串常用方法</h4>
<p>通过内建函数 <code>dir</code> 可以返回传入其中的对象的所有方法名列表。</p>
<pre><code class="language-python">print(dir(str))
</code></pre>
<p>['<strong>add</strong>', '<strong>class</strong>', '<strong>contains</strong>', '<strong>delattr</strong>', '<strong>dir</strong>', '<strong>doc</strong>', '<strong>eq</strong>', '<strong>format</strong>', '<strong>ge</strong>', '<strong>getattribute</strong>', '<strong>getitem</strong>', '<strong>getnewargs</strong>', '<strong>gt</strong>', '<strong>hash</strong>', '<strong>init</strong>', '<strong>init_subclass</strong>', '<strong>iter</strong>', '<strong>le</strong>', '<strong>len</strong>', '<strong>lt</strong>', '<strong>mod</strong>', '<strong>mul</strong>', '<strong>ne</strong>', '<strong>new</strong>', '<strong>reduce</strong>', '<strong>reduce_ex</strong>', '<strong>repr</strong>', '<strong>rmod</strong>', '<strong>rmul</strong>', '<strong>setattr</strong>', '<strong>sizeof</strong>', '<strong>str</strong>', '<strong>subclasshook</strong>', 'capitalize', 'casefold', 'center', 'count', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'format_map', 'index', 'isalnum', 'isalpha', 'isascii', 'isdecimal', 'isdigit', 'isidentifier', 'islower', 'isnumeric', 'isprintable', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'maketrans', 'partition', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']<br>
通过内建函数 help 可以返回传入函数的帮助信息。</p>
<pre><code class="language-python">help('abc'.replace)
</code></pre>
<p>Help on built-in function replace:</p>
<p>replace(old, new, count=-1, /) method of builtins.str instance<br>
Return a copy with all occurrences of substring old replaced by new.</p>
<p>count<br>
Maximum number of occurrences to replace.<br>
-1 (the default value) means replace all occurrences.</p>
<p>If the optional argument count is given, only the first count occurrences are<br>
replaced.<br>
<a href="https://docs.python.org/3/library/stdtypes.html?utm_source=testingpai.com#string-methods">官方文档地址</a></p>
<hr>
<h5 id="strisalpha">str.isalpha()</h5>
<p>作用：检查字符串是否只由字母组成 。如果字符串中的所有字符都是字母，并且至少有一个字符，返回 <code>True</code> ，否则返回 <code>False</code></p>
<pre><code class="language-python">str = &quot;abc&quot;
print(str.isalpha())
</code></pre>
<p>执行结果:</p>
<p>true</p>
<hr>
<h5 id="strisdigit">str.isdigit()</h5>
<p>作用：检查字符串是否只由数字组成。如果序列中所有字节都是 ASCII 十进制数码并且序列非空则返回 <code>True</code> ，否则返回 <code>False</code> 。</p>
<pre><code class="language-python">str = &quot;123134123&quot;
print(str.isdigit())
</code></pre>
<p>执行结果</p>
<p>true</p>
<hr>
<h5 id="strislower">str.islower()</h5>
<p>作用：检查字符串是否全部是小写字母。 如果序列中至少有一个小写的 ASCII 字符并且没有大写的 ASCII 字符则返回 <code>True</code> ，否则返回 <code>False</code> 。</p>
<pre><code class="language-python">str ='hello world'
print(str.islower())
</code></pre>
<p>执行结果</p>
<p>true</p>
<hr>
<h5 id="strisupper">str.isupper()</h5>
<p>作用：检查字符串是否全部是大写字母。如果序列中至少有一个大写字母 ASCII 字符并且没有小写 ASCII 字符则返回 <code>True</code> ，否则返回 <code>False</code> 。</p>
<pre><code class="language-python">str ='HELLO WORLD'
print(str.isupper())
</code></pre>
<p>执行结果</p>
<p>true</p>
<hr>
<h5 id="strisspace">str.isspace</h5>
<p>作用：检查字符串只含有空白符。如果序列中所有字节都是 ASCII 空白符并且序列非空则返回 <code>True</code> ，否则返回 <code>False</code> 。 ASCII 空白符就是字节值包含在序列 <code>b' \t\n\r\x0b\f'</code> (空格, 制表, 换行, 回车, 垂直制表, 进纸) 中的字符。</p>
<pre><code class="language-python">str ='\t\n\r\x0b\f'
print(str.isspace())
</code></pre>
<p>执行结果</p>
<p>true</p>
<hr>
<h5 id="strupper">str.upper()</h5>
<p>作用：将字符串都变成大写字母</p>
<h5 id="strlower">str.lower()</h5>
<p>作用：将字符串都变成小写字母</p>
<pre><code class="language-python">str = &quot;hello world !!! hhh&quot;

print(str.upper())
print(str.lower())
</code></pre>
<p>执行结果</p>
<p>HELLO WORLD !!! HHH<br>
hello world !!! hhh</p>
<hr>
<h5 id="strstripchars">str.strip(chars = &quot; &quot;)</h5>
<p>作用：移除字符串头尾指定的字符序列chars，默认为空格</p>
<h5 id="strlstripchars">str.lstrip(chars = &quot; &quot;)</h5>
<p>作用：移除字符串头部指定的字符序列chars，默认为空格</p>
<h5 id="strrstripchars">str.rstrip(chars = &quot; &quot;)</h5>
<p>作用：移除字符串尾部指定的字符序列chars，默认为空格</p>
<pre><code class="language-python">str = &quot;   hello  every  &quot;

print(&quot;1&quot;, str.strip(), &quot;1&quot;)
print(str.lstrip(), &quot;1&quot;)
print(&quot;1&quot;, str.rstrip())

str = &quot;!!! cool !!!&quot;

print(str.strip(&quot;!&quot;))
</code></pre>
<p>执行结果</p>
<p>1 hello  every 1<br>
hello  every   1<br>
1    hello  every<br>
cool</p>
<hr>
<h5 id="strreplaceoldnewcount-1">str.replace(old,new,count= -1)</h5>
<p>作用：把字符串中的 old（旧字符串） 替换成 new(新字符串)，count代表最多替换多少次，默认-1代表全部替换</p>
<pre><code class="language-python">str = &quot;hello world !!! hhh&quot;

print(str.replace(&quot; &quot;, &quot;-&quot;))
print(str.replace(&quot; &quot;, &quot;-&quot;, 1))
</code></pre>
<p>执行结果</p>
<p>hello-world-!!!-hhh<br>
hello-world !!! hhh</p>
<hr>
<h5 id="strsplitstr-numstringcountstr">str.split(str=&quot;&quot;, num=string.count(str))</h5>
<p>作用：将字符串按照str分割成列表，如果参数 num 有指定值，则分隔 num+1 个子字符串</p>
<pre><code class="language-python">str = &quot;hello world !!! hhh&quot;

print(str.split(&quot; &quot;))
print(str.split(&quot; &quot;, 1))
</code></pre>
<p>执行结果</p>
<p>['hello', 'world', '!!!', 'hhh']<br>
['hello', 'world !!! hhh']</p>
<hr>
<h5 id="strindexsub-startnone-endnone">str.index(sub, start=None, end=None)</h5>
<p>作用：查看sub是否在字符串中，在的话返回索引，且只返回第一次匹配到的索引；若找不到则报错；可以指定统计的范围，[start,end) 左闭区间右开区间</p>
<pre><code class="language-python">str = &quot;helloworldhhh&quot;
print(str.index(&quot;h&quot;))
print(str.index(&quot;hhh&quot;))
# print(str.index(&quot;test&quot;)) 直接报语法错误：ValueError: substring not found
</code></pre>
<p>执行结果</p>
<p>0<br>
10</p>
<hr>
<h5 id="strfindsub-startnone-endnone">str.find(sub, start=None, end=None)</h5>
<p>作用：和index()一样，只是找不到不会报错，而是返回-1</p>
<pre><code class="language-python">str = &quot;helloworldhhh&quot;
print(str.find(&quot;h&quot;))
print(str.find(&quot;hhh&quot;))
print(str.find(&quot;test&quot;))
</code></pre>
<p>执行结果</p>
<p>0<br>
10<br>
-1</p>
<hr>
<h5 id="strcount-sub-startnone-endnone">str.count( sub, start=None, end=None)</h5>
<p>作用：统计子字符串的数量；可以指定统计的范围，[start,end) 左闭区间右开区间</p>
<pre><code class="language-python">str = &quot;hello world !!! hhh&quot;

print(str.count(&quot; &quot;))
print(str.count(&quot; &quot;, 5, 10))
</code></pre>
<p>执行结果</p>
<p>3<br>
1</p>
<hr>
<h4 id="16-字符串和数值的相互转化">1.6 字符串和数值的相互转化</h4>
<p><code>1</code> 和 <code>'1'</code> 不同，<code>1.2</code> 和 <code>'1.2'</code> 也不相同，但是它们可以相互转化</p>
<pre><code class="language-python"># 整数和字符串之间的转化
int('1')
</code></pre>
<p>1</p>
<pre><code class="language-python">str(1)
</code></pre>
<p>'1'</p>
<pre><code class="language-python"># 浮点数和字符串之间的转化
float('1.2')
</code></pre>
<p>1.2</p>
<pre><code class="language-python">str(1.2)
</code></pre>
<p>'1.2'</p>
<pre><code class="language-python"># 尝试 int('1.2')看看结果会是什么
int('1.2')
</code></pre>
<h4 id="17-转义符">1.7 转义符</h4>
<p>在需要在字符中使用特殊字符时，python 用反斜杠 <code>\</code> 转义字符。常用转义字符如下表：</p>
<table>
<thead>
<tr>
<th>(在行尾时)</th>
<th>续行符</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>\\</code></td>
<td>反斜杠符号</td>
</tr>
<tr>
<td><code>\'</code></td>
<td>单引号</td>
</tr>
<tr>
<td><code>\&quot;</code></td>
<td>双引号</td>
</tr>
<tr>
<td>\a</td>
<td>响铃</td>
</tr>
<tr>
<td>\n</td>
<td>换行</td>
</tr>
<tr>
<td>\t</td>
<td>横向制表符</td>
</tr>
<tr>
<td>\r</td>
<td>回车</td>
</tr>
<tr>
<td>\f</td>
<td>换页</td>
</tr>
</tbody>
</table>
<pre><code class="language-python">print('窗前明月光，\n疑是地上霜。')  # 输出换行
</code></pre>
<p>窗前明月光，<br>
疑是地上霜。</p>
<pre><code class="language-python">print('对\\错')   # 输出反斜杠本身
</code></pre>
<p>对\错</p>
<pre><code class="language-python">print('\'')      # 输出单引号本身
</code></pre>
<h4 id="18-字符串格式化">1.8 字符串格式化</h4>
<p>在实际工作中经常需要动态输出字符。</p>
<p>例如，我们通过程序计算计算机的内存利用率，然后输出</p>
<p>10:15 计算机的内存利用率为30%</p>
<p>其中下划线内容会动态调整，需要根据程序执行结果进行填充，最终形成上述格式的字符串输出。</p>
<p>python 支持两种形式的字符串格式化</p>
<h5 id="字符串格式化"><code>%</code> 字符串格式化</h5>
<pre><code class="language-python">%[(name)][flags][width][.precision]typecode
</code></pre>
<ul>
<li>
<p>(name)<code>可选，用于选择指定的</code>key</p>
</li>
<li>
<p><code>flags</code> 可选，可供选择的值有，注意只有在和数值类型的 <code>typecode</code> 配合才起作用</p>
<ul>
<li><code>+</code>, 右对齐，正数前加正号，负数前加负号</li>
<li><code>-</code>, 左对齐，正数前无符号，负数前加负号</li>
<li><code>空格</code>, 右对齐，正数前加空格，负数前加负号</li>
<li><code>0</code>, 右对齐，正数前无符号，复数前加负号；用 <code>0</code> 填充空白处</li>
</ul>
</li>
<li>
<p><code>width</code>，可选字符串输出宽度</p>
</li>
<li>
<p><code>.precision</code> 可选，小数点后保留位数，注意只有在和数值类型的 <code>typecode</code> 配合才起作用</p>
</li>
<li>
<p><code>typecode</code> 必选必选</p>
<ul>
<li><code>s</code>，获取传入对象的字符串形式，并将其格式化到指定位置</li>
<li><code>r</code>，获取传入对象的 <code>__repr__</code> 方法的返回值，并将其格式化到指定位置</li>
<li><code>c</code>，整数：将数字转换成其 unicode 对应的值，10 进制范围为 0 &lt;= i &lt;= 1114111（py27 则只支持 0-255）；字符：将字符添加到指定位置</li>
<li><code>o</code>，将整数转换成 八 进制表示，并将其格式化到指定位置</li>
<li><code>x</code>，将整数转换成十六进制表示，并将其格式化到指定位置</li>
<li><code>d</code>，将整数、浮点数转换成 十 进制表示，并将其格式化到指定位置</li>
<li><code>e</code>，将整数、浮点数转换成科学计数法，并将其格式化到指定位置（小写 e）</li>
<li><code>E</code>，将整数、浮点数转换成科学计数法，并将其格式化到指定位置（大写 E）</li>
<li><code>f</code>， 将整数、浮点数转换成浮点数表示，并将其格式化到指定位置（默认保留小数点后 6 位）</li>
<li><code>F</code>，同上</li>
<li><code>g</code>，自动调整将整数、浮点数转换成 浮点型或科学计数法表示（超过 6 位数用科学计数法），并将其格式化到指定位置（如果是科学计数则是 e；）`</li>
<li><code>G</code>，自动调整将整数、浮点数转换成 浮点型或科学计数法表示（超过 6 位数用科学计数法），并将其格式化到指定位置（如果是科学计数则是 E；）`</li>
<li><em>%，当字符串中存在格式化标志时，需要用 %% 表示一个百分号</em></li>
</ul>
</li>
</ul>
<pre><code class="language-python">res = '%s计算机的内存利用率为%s%%' % ('11:15', 75)
print(res)
# '%s'作为槽位和 % 号后提供的值按顺序一一对应
</code></pre>
<p>11:15 计算机的内存利用率为 75%</p>
<pre><code class="language-python">res = '%(time)s计算机的内存利用率为%(percent)s%%' % {'time':'11:15', 'percent': 75}
# % 后是字典时，可以通过name指定key对应的值
print(res)
</code></pre>
<p>11:15 计算机的内存利用率为 75%</p>
<pre><code class="language-python"># 输出两位数的月份，例如01，02
res = '%02d' % 8
print(res)
</code></pre>
<p>08</p>
<pre><code class="language-python"># 保留2为小数
res = '%(time)s计算机的内存利用率为%(percent).2f%%' % {'time':'11:15', 'percent': 75.123}
print(res)
</code></pre>
<p>11:15 计算机的内存利用率为 75.12%</p>
<pre><code class="language-python">print('字符串%(key)s,十进制%(key)d,科学计数%(key)e,八进制%(key)o,16进制%(key)x,unicode字符%(key)c' % {'key': 65})
</code></pre>
<p>字符串 65，十进制 65，科学计数 6.500000e+01，八进制 101,16 进制 41,unicode 字符 A</p>
<h5 id="format-函数格式化"><code>format</code> 函数格式化</h5>
<p><code>%</code> 的字符串格式化继承自 C 语言，python 中给字符串对象提供了一个 <code>format</code> 函数进行字符串格式化，且功能更强大，并且大力推荐，所以我们要首选使用。</p>
<p>基本语法是：</p>
<pre><code>&lt;模板字符串&gt;.format(&lt;逗号分隔的参数&gt;)
</code></pre>
<p>在模板字符串中使用 <code>{}</code> 代替以前的 <code>%</code> 作为槽位</p>
<pre><code class="language-python">'{}计算机的内存利用率为{}%'.format('11:15', 75)
</code></pre>
<p>'11:15 计算机的内存利用率为 75%'<br>
当 format 中的参数使用位置参数提供时，<code>{}</code> 中可以填写参数的整数索引和参数一一对应</p>
<pre><code class="language-python">'{0}计算机的内存利用率为{1}%'.format('11:15', 75)
</code></pre>
<p>'11:15 计算机的内存利用率为 75%'<br>
当 format 中的参数使用关键字参数提供时，{}中可以填写参数名和参数一一对应</p>
<pre><code class="language-python">'{time}计算机的内存利用率为{percent}%'.format(time='11:15', percent=75)
</code></pre>
<p>'11:15 计算机的内存利用率为 75%'<br>
<code>{}</code> 中除了可以写参数索引外，还可以填写控制信息来实现更多的格式化功能，语法如下</p>
<pre><code class="language-python">{&lt;参数序号&gt;:&lt;格式控制标记&gt;}
其中格式控制标记格式如下
[fill][align][sign][#][0][width][,][.precision][type]
</code></pre>
<ul>
<li>
<p>fill 【可选】空白处填充的字符</p>
</li>
<li>
<p>align 【可选】对齐方式（需配合 width 使用）</p>
</li>
<li>
<ul>
<li>&lt;，内容左对齐</li>
</ul>
</li>
<li>
<p>&gt;，内容右对齐(默认)</p>
</li>
<li>
<p>＝，内容右对齐，将符号放置在填充字符的左侧，且只对数字类型有效。 即使：符号 + 填充物 + 数字</p>
</li>
<li>
<p>^，内容居中</p>
</li>
<li>
<p>sign 【可选】有无符号数字</p>
<ul>
<li>+，正号加正，负号加负；</li>
<li>-，正号不变，负号加负；</li>
<li>空格 ，正号空格，负号加负；</li>
</ul>
</li>
<li>
<p>#</p>
<pre><code>【可选】对于二进制、八进制、十六进制，如果加上#，会显示 0b/0o/0x，否则不显示
</code></pre>
</li>
<li>
<p>， 【可选】为数字添加分隔符，如：1,000,000</p>
</li>
<li>
<p>width 【可选】格式化位所占宽度</p>
</li>
<li>
<p>.precision 【可选】小数位保留精度</p>
</li>
<li>
<p>type 【可选】格式化类型</p>
<ul>
<li>传入” 字符串类型 “的参数
<ul>
<li>s，格式化字符串类型数据</li>
<li>空白，未指定类型，则默认是 None，同 s</li>
</ul>
</li>
<li>传入“ 整数类型 ”的参数
<ul>
<li>b，将 10 进制整数自动转换成 2 进制表示然后格式化</li>
<li>c，将 10 进制整数自动转换为其对应的 unicode 字符</li>
<li>d，十进制整数</li>
<li>o，将 10 进制整数自动转换成 8 进制表示然后格式化；</li>
<li>x，将 10 进制整数自动转换成 16 进制表示然后格式化（小写 x）</li>
<li>X，将 10 进制整数自动转换成 16 进制表示然后格式化（大写 X）</li>
</ul>
</li>
<li>传入“ 浮点型或小数类型 ”的参数
<ul>
<li>e， 转换为科学计数法（小写 e）表示，然后格式化；</li>
<li>E， 转换为科学计数法（大写 E）表示，然后格式化;</li>
<li>f ， 转换为浮点型（默认小数点后保留 6 位）表示，然后格式化；</li>
<li>F， 转换为浮点型（默认小数点后保留 6 位）表示，然后格式化；</li>
<li>g， 自动在 e 和 f 中切换</li>
<li>G， 自动在 E 和 F 中切换</li>
<li>%，显示百分比（默认显示小数点后 6 位）</li>
</ul>
</li>
</ul>
</li>
</ul>
<pre><code class="language-python"># 输出两位数的月份，例如01，02
res = '{:0&gt;2}'.format(8) 
print(res)
</code></pre>
<p>08</p>
<pre><code class="language-python"># 保留2为小数
res = '{time}计算机的内存利用率为{percent:.2%}'.format(time='11:15', percent=0.75123)
print(res)
</code></pre>
<p>11:15 计算机的内存利用率为 75.12%</p>
<pre><code class="language-python">print('字符串{key},十进制{key:d},科学计数{key:e},八进制{key:o},16进制{key:x},unicode字符{key:c}'.format(key=65))
</code></pre>
<p>字符串 65，十进制 65，科学计数 6.500000e+01，八进制 101,16 进制 41,unicode 字符 A</p>
<h5 id="格式字符串字面值">格式字符串字面值</h5>
<p>3.6 新版功能：</p>
<p>格式字符串字面值或称为 <code>f-string</code> 是标注了 'f' 或 'F' 前缀的字符串字面值。这种字符串可包含替换字段，即以 {} 标注的表达式。</p>
<p>基本语法是：</p>
<pre><code>literal_char{expression[:format_spec]}
</code></pre>
<ul>
<li><code>literal_char</code> 普通字符</li>
<li><code>expression</code> 表达式，变量或函数。。</li>
<li><code>format_spec</code> 格式字符串，规则同上面的 format 字符串</li>
</ul>
<p>直接在 f 字符串的花括号内写上变量名，解释器会自动将变量的值的字符串形式替换</p>
<pre><code class="language-python">item = '11:15'
percent = 75
f'{time}计算机的内存利用率为{percent}%'
'11:15计算机的内存利用率为75%'
</code></pre>
<p>带格式的 f 字符串</p>
<pre><code class="language-python"># 输出两位数的月份，例如01，02
month = 8
res = f'{month:0&gt;2}'
print(res)
</code></pre>
<p>08</p>
<pre><code class="language-python"># 保留2为小数
time = '11:15'
percent = 0.75123
res = f'{time}计算机的内存利用率为{percent:.2%}'
print(res)

</code></pre>
<p>11:15计算机的内存利用率为75.12%</p>
<pre><code class="language-python">key = 65
print(f'字符串{key},十进制{key:d},科学计数{key:e},八进制{key:#o},16进制{key:x},unicode字符{key:c}')
</code></pre>
<p>字符串65,十进制65,科学计数6.500000e+01,八进制0o101,16进制41,unicode字符A</p>
<p>包含运算和函数的 f 字符串</p>
<pre><code class="language-python">num = -1
print(f'{num+1=}')
</code></pre>
<pre><code class="language-python">num+1=0
</code></pre>
<pre><code class="language-python">print(f'{abs(num)=}')
</code></pre>
<pre><code class="language-bash">abs(num)=1
</code></pre>
<pre><code class="language-python">s = 'abcd'
print(f'{s[:python :-1]=}')
</code></pre>
<pre><code class="language-python">s[::-1]='dcba'
</code></pre>
<h3 id="2-列表">2. 列表</h3>
<p>python 中列表(list)用来表示任意元素的序列，元素可以是任意数据类型，序列中的元素可以增，删，改。</p>
<h4 id="21-列表的定义">2.1 列表的定义</h4>
<p>列表由一对中括号进行定义，元素与元素直接使用逗号隔开。</p>
<pre><code class="language-python">a = []                      # 空列表
b = [&quot;a&quot;, &quot;b&quot;, &quot;cde&quot;]       # 字符串列表项
c = [1, &quot;b&quot;, &quot;c&quot;]           # 数字列表项  
d = [1, &quot;b&quot;, []]            # 列表列表项
e = [1, &quot;b&quot;, [2, &quot;c&quot;]]      # 列表作为列表的元素叫做列表的嵌套


print('a的类型为：', type(a))    # a的类型为： &lt;class 'list'&gt;
print('b的类型为：', type(b))    # b的类型为： &lt;class 'list'&gt;
print('c的类型为：', type(c))    # c的类型为： &lt;class 'list'&gt;
print('d的类型为：', type(d))    # d的类型为： &lt;class 'list'&gt;
print('e的类型为：', type(e))    # e的类型为： &lt;class 'list'&gt;
</code></pre>
<p>a 的类型为： &lt;class 'list'&gt;<br>
b 的类型为： &lt;class 'list'&gt;<br>
c 的类型为： &lt;class 'list'&gt;<br>
d 的类型为： &lt;class 'list'&gt;<br>
e 的类型为： &lt;class 'list'&gt;</p>
<h4 id="22-列表的拼接">2.2 列表的拼接</h4>
<p>像字符串一样，列表之间可以进行加法运算实现列表的拼接，列表可以和整数进行乘法运算实现列表的重复。</p>
<pre><code class="language-python">[1,2,3] +  [4,5,6]
</code></pre>
<p>[1, 2, 3, 4, 5, 6]</p>
<pre><code class="language-python">[1,2,3] * 3
</code></pre>
<p>[1, 2, 3, 1, 2, 3, 1, 2, 3]</p>
<h4 id="23-列表的索引和切片">2.3 列表的索引和切片</h4>
<p>序列的切片操作完全一致，参见字符串</p>
<p>注意嵌套列表的元素获取</p>
<pre><code class="language-python">ls = [1,2,['a','b']]
ls[2][0]
</code></pre>
<p>'a'</p>
<h4 id="24-列表的常用操作">2.4 列表的常用操作</h4>
<p>python 中的列表操作非常灵活，是非常重要和经常使用的数据类型。</p>
<h5 id="241-修改元素">2.4.1 修改元素</h5>
<p>列表的中的元素可以进行修改，只需使用索引赋值即可。</p>
<pre><code class="language-python">ls = [1,2,3]
ls[1] = 'a'
print(ls)
</code></pre>
<p>[1, 'a', 3]</p>
<h5 id="242-增加元素">2.4.2 增加元素</h5>
<p>给列表添加元素需要使用到列表的方法</p>
<p><code>.append(el)</code>，在列表的末尾添加一个元素</p>
<pre><code class="language-python">ls = [1,2,3]
ls.append(4)
print(ls)
</code></pre>
<p>[1, 2, 3, 4]<br>
<code>.insert(index, el)</code>，在列表的指定索引处插入一个元素</p>
<pre><code class="language-python">ls = [1,2,3]
ls.insert(0,0)
print(ls)
</code></pre>
<p>[0, 1, 2, 3]<br>
<code>.extend(iterable)</code>，扩展列表，元素为传入的可迭代对象中的元素</p>
<pre><code class="language-python">ls = [1,2,3]
ls.extend([4,5,6])
print(ls)
</code></pre>
<p>[1, 2, 3, 4, 5, 6]</p>
<h5 id="243-删除元素">2.4.3 删除元素</h5>
<p><code>.pop(index=-1)</code>，删除指定索引的元素，并返回该元素，没有指定索引默认删除最后一个元素</p>
<pre><code class="language-python">ls = [1,2,3]
ls.pop()
</code></pre>
<p>3</p>
<pre><code class="language-python">  print(ls)
</code></pre>
<p>[1, 2]</p>
<pre><code class="language-python">  ls.pop(0)
</code></pre>
<p>1</p>
<pre><code class="language-python">print(ls)
</code></pre>
<p>[2]<br>
<code>.remove(value)</code>，从列表中删除第一个指定的值 value，如不不存在 value 则报错。</p>
<pre><code class="language-python">ls = [1,2,3,1]
ls.remove(1)
print(ls)
</code></pre>
<p>[2, 3, 1]<br>
<code>.clear()</code>，清空列表，原列表变成空列表</p>
<pre><code class="language-python">ls = [1,2,3]
ls.clear()
print(ls)
</code></pre>
<p>[]</p>
<h4 id="25-列表的其他方法">2.5 列表的其他方法</h4>
<p><code>.copy()</code> 返回一个列表的浅拷贝。在讲可变与不可变类型的时候再详细讨论。</p>
<p><code>.count(value)</code>，统计列表中 value 的出现次数</p>
<pre><code class="language-python">ls = [1,2,3,1]
ls.count(1)
</code></pre>
<p>2<br>
<code>.index(self, value, start=0, stop=9223372036854775807)</code>，返回列表中指定值 value 的第一个索引，不存在则报错</p>
<pre><code class="language-python">ls = [1,2,3,1]
ls.index(1)
</code></pre>
<p>0</p>
<pre><code class="language-python">  l.index(1,1)
</code></pre>
<p>3<br>
<code>.reverse()</code>，翻转列表元素顺序</p>
<pre><code class="language-python">ls = [1,2,3]
ls.reverse()
print(ls)
</code></pre>
<p>[3, 2, 1]<br>
<code>.sort(key=None, reverse=False)</code>，对列表进行排序，默认按照从小到大的顺序，当参数 reverse=True 时，从大到小。注意列表中的元素类型需要相同，否则抛出异常。</p>
<pre><code class="language-python">ls = [2,1,3]
ls.sort()
print(ls)
</code></pre>
<p>[1, 2, 3]</p>
<pre><code class="language-python"># 从大到小
ls.sort(reverse=True) 
print(ls)
</code></pre>
<p>[3, 2, 1]</p>
<pre><code class="language-python">ls = [1,2,'3']
ls.sort()
</code></pre>
<hr>
<p>TypeError Traceback (most recent call last)</p>
<p>in<br>
1 ls = [1,2,'3']<br>
----&gt; 2 ls.sort()</p>
<p>TypeError: '&lt;' not supported between instances of 'str' and 'int'</p>
<h4 id="26-字符串和列表的转换">2.6 字符串和列表的转换</h4>
<p>字符串是字符组成的序列，可以通过 <code>list</code> 函数将字符串转换成单个字符的列表。</p>
<pre><code class="language-python">s = 'hello world!'
ls = list(s)
print(ls)
</code></pre>
<p>['h', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd', '!']<br>
由字符组成的列表可以通过字符串的 join 方法进行拼接</p>
<pre><code class="language-python"># 接上面的案例
''.join(ls)
</code></pre>
<p>'hello world!'</p>
<h3 id="3-元组">3. 元组</h3>
<p>元组(tuple)表示任意元素的序列，元素可以是任意数据类型，序列中的元素不能增，删，改，可以说元组就是不可变的列表。</p>
<h4 id="31-元组的定义">3.1 元组的定义</h4>
<p>元组通过一对小括号进行定义，元组之间使用逗号隔开。</p>
<pre><code class="language-python">a = ()                      # 空元祖
b = (&quot;a&quot;, &quot;b&quot;, &quot;cde&quot;)       # 字符串
c = (1, &quot;b&quot;, &quot;c&quot;)           # 数字
d = (1, &quot;b&quot;, [])            # 列表
e = (1, &quot;b&quot;, (2, &quot;c&quot;))      # 元祖
f = 1,2

print('a的类型为：', type(a))    # a的类型为： &lt;class 'tuple'&gt;
print('b的类型为：', type(b))    # b的类型为： &lt;class 'tuple'&gt;
print('c的类型为：', type(c))    # c的类型为： &lt;class 'tuple'&gt;
print('d的类型为：', type(d))    # d的类型为： &lt;class 'tuple'&gt;
print('e的类型为：', type(e))    # e的类型为： &lt;class 'tuple'&gt;
print('f的类型为：', type(f))    # f的类型为： &lt;class 'tuple'&gt;
</code></pre>
<p>a 的类型为： &lt;class 'tuple'&gt;<br>
b 的类型为： &lt;class 'tuple'&gt;<br>
c 的类型为： &lt;class 'tuple'&gt;<br>
d 的类型为： &lt;class 'tuple'&gt;<br>
e 的类型为： &lt;class 'tuple'&gt;<br>
f 的类型为： &lt;class 'tuple'&gt;<br>
注意单元素元组的定义，一定要多加个逗号</p>
<pre><code class="language-python">g = ('hello')
h = ('hello',)
print('g的类型为：', type(g))    # g的类型为： &lt;class 'str'&gt;
print('h的类型为：', type(h))    # h的类型为： &lt;class 'tuple'&gt;
</code></pre>
<p>g 的类型为： &lt;class 'str'&gt;<br>
h 的类型为： &lt;class 'tuple'&gt;</p>
<h4 id="32-元组的索引和切片">3.2 元组的索引和切片</h4>
<p>序列的索引和切片完全一致，参加字符串。</p>
<h4 id="32-元组的常用操作">3.2 元组的常用操作</h4>
<p>元组的元素不能修改，增加和删除，其他操作和列表的操作一致。</p>
<p>元组利用不可修改的特性，应用在多变量赋值和函数多返回值上。</p>
<pre><code class="language-python">a, b = (1, 2)
# 经常简写为a, b= 1, 2
</code></pre>
<p>当然多变量赋值时可以使用可迭代对象，但是元组最安全，它是不可变的。</p>
<p>关于函数多返回值的问题我们后面再讲</p>
<h4 id="33-元组的常用方法">3.3 元组的常用方法</h4>
<p>元组只有两个公有方法 <code>count,index</code> 用法与列表相同。</p>
<h4 id="34-len-函数">3.4 len 函数</h4>
<p>python 内建函数 <code>len</code> 可以获取对象中包含的元素个数</p>
<pre><code class="language-python">s = 'hello'
ls = [1,2,3]
t = (1,2,3)
print(len(s))
print(len(ls))
print(len(t))
</code></pre>
<p>5<br>
3<br>
3</p>
<h3 id="4-可变与不可变对象">4. 可变与不可变对象</h3>
<p>python 中的对象根据底层内存机制分为可变与不可变两种。</p>
<p>可变对象可以在其 <code>id()</code> 保持固定的情况下改变其取值。</p>
<p>下面的列表 a，修改值后，id 保持不变</p>
<pre><code class="language-python">a = [1,2,3]
id(a)
</code></pre>
<p>14053670614592</p>
<pre><code class="language-python"># 修改a的值
a[0] = 'a'
id(a)
# 修改a的值
a[0] = 'a'
id(a)
</code></pre>
<p>14053670614592</p>
<p>基本数据类型中列表，集合和字典都是可变数据类型。</p>
<p>如果修改一个对象的值，必须创建新的对象，那么这个对象就是不可变对象。</p>
<p>例如下面的字符串 s，修改内容后 id 发生了改变。</p>
<pre><code class="language-python">s = 'hello'
id(s)
</code></pre>
<p>140453671058032</p>
<pre><code class="language-python">s = 'Hello'
id(s)
</code></pre>
<p>140453671058032</p>
<p>基本数据类型中数字，字符串，元组是不可变对象。</p>
<h3 id="5可哈希对象">5.可哈希对象</h3>
<p>一个对象的哈希值如果在其生命周期内绝不改变，就被称为可哈希。可哈希对象都可以通过内置函数 <code>hash</code> 进行求值。</p>
<p>它们在需要常量哈希值的地方起着重要的作用，例如作为集合中的元素，字典中的键。</p>
<p>不可变数据类型都是可哈希对象，可变数据类型都是不可哈希对象。</p>
<pre><code class="language-python">  hash(1)
</code></pre>
<p>1</p>
<pre><code class="language-python">  hash([1,2])
</code></pre>
<hr>
<p>TypeError Traceback (most recent call last)</p>
<p>in<br>
----&gt; 1 hash([1,2])</p>
<p>TypeError: unhashable type: 'list'</p>
<h3 id="6赋值与深浅拷贝">6.赋值与深浅拷贝</h3>
<h4 id="61-赋值">6.1 赋值</h4>
<p>python 是解释型编程语言，当解释器在碰到赋值语句时它首先会计算赋值符号右边的表达式的值，然后再创建左边的变量。</p>
<p>变量中实际存储的是值在内存中的地址，引用变量时通过地址指向内存中的值。通过内建函数 <code>id</code> 可以查看解释器中变量的虚拟内存地址整数值。</p>
<pre><code class="language-python">`   `a = 1
id(a)
</code></pre>
<p>4382612480</p>
<p>python 的赋值语句不复制对象，而是创建目标和对象的绑定关系。<br>
所以将一个变量赋值给另外一个变量时，并不会创建新的值，只是新变量会指向值的内存地址</p>
<pre><code class="language-python">a = 1
b = a
id(a) == id(b)
</code></pre>
<p>True<br>
对于字符串和数字这样的不可变数据类型，当上例中的变量 a 自加 1 时，会创建一个新值重新，它不会改变原来的值。因此对变量 b 没有影响。</p>
<pre><code class="language-python">a += 1
print(a)
print(b)
</code></pre>
<p>2<br>
1<br>
但是看下面的案例</p>
<pre><code class="language-python">ls = [1,2,3]
ln = ls
ls[0] = 2
print(ls)
</code></pre>
<p>[2, 2, 3]<br>
会发现变量 ls 在修改列表的值后，变量 ln 的值也发生了同样的改变，这是因为 ls，ln 指向相同的列表。对可变数据类型进行变量赋值时要考虑这个特性。</p>
<h4 id="62-浅拷贝">6.2 浅拷贝</h4>
<p>导入 <code>copy</code> 模块中的 <code>copy</code> 函数就是浅拷贝操作</p>
<pre><code class="language-python">import copy
a = 123
s = 'hello'
b = copy.copy(a)
d = copy.copy(s)
print(id(a),id(b))
print(id(s),id(d))
</code></pre>
<p>4382616384 4382616384<br>
140571355341296 140571355341296<br>
对于字符串数字这种不可变数据类型来说，浅拷贝相当于变量赋值，所以变量 a 和 b 的 id 相等，变量 s 和 d 的 id 相等。</p>
<pre><code class="language-python">a += 1
print(a)
print(b)
</code></pre>
<p>124<br>
123<br>
对原变量的修改会创建新的值，不会影响浅拷贝生成的变量，变量 a 自加 1 后指向值 124，变量 b 的值不变</p>
<p>对于可变数据类型，列表，字典，集合等浅拷贝会有不一样的结果。</p>
<pre><code class="language-python">ls = [1,'2',['a','b']]
ln = copy.copy(ls)
print(id(ls),id(ln))
</code></pre>
<p>140571352915648 140571355343040<br>
当对可变数据类型进行浅拷贝时，会创建一个新的数据，所以变量 ls 和 ln 的 id 不想等。</p>
<pre><code class="language-python">  print(id(ls[2]),id(ln[2]))
</code></pre>
<p>140571355288384 140571355288384</p>
<p>浅拷贝将原始对象中找到的对象引用插入其中。<br>
也就是说，ls 列表中的元素，ln 中只是引用，ln 中的每个对应位置指向的内存地址和 ls 相同。</p>
<pre><code class="language-python">ls[0] = 2
print(ls)
print(ln)
</code></pre>
<p>[2, '2', ['a', 'b']]<br>
[1, '2', ['a', 'b']]<br>
修改 ls 中第一个元素，因为是不可变数据类型，所以 ls 中第一个位置指向了新的内存地址，ln 中的不变。</p>
<pre><code class="language-python">ls[2][0] = 1
print(ls)
print(ln)
</code></pre>
<p>[2, '2', [1, 'b']]<br>
[1, '2', [1, 'b']]<br>
修改 ls 中最后一个元素，因为是可变数据类型，所以 ln 中的值也发生了改变。</p>
<h4 id="63-深拷贝">6.3 深拷贝</h4>
<p>不可变数据类型的深浅拷贝一致。</p>
<p>复杂数据类型进行深拷贝会对数据中的所有元素完全重新复制一份，不管有多少层嵌套，互不影响。</p>
<pre><code class="language-python">import copy
ls = [1,2,3,['a', 'b']]
# 深拷贝使用deepcopy
ln = copy.deepcopy(ls)
ls[3][0]='b'
print(ls)
print(ln)
</code></pre>
<p>[1, 2, 3, ['b', 'b']]<br>
[1, 2, 3, ['a', 'b']]</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ Python基本数据类型 ·上]]></title>
        <id>https://Shisuiyi.github.io/w-B-uNoob/</id>
        <link href="https://Shisuiyi.github.io/w-B-uNoob/">
        </link>
        <updated>2021-10-01T02:05:21.000Z</updated>
        <content type="html"><![CDATA[<h1 id="python基本数据类型-上">Python基本数据类型 ·上</h1>
<h2 id="一-什么是数据类型">一、什么是数据类型</h2>
<p>编程语言通过一些复杂的计算机物理底层机制，创造不同类型的数据，用来表示现实世界中的不同信息，以便于计算机更好的存储和计算。</p>
<p>每种编程语言都会有一些基本的数据类型用来表示现实世界中的常见信息。</p>
<p>Python 中的常见数据类型如下</p>
<h3 id="数值类型">数值类型</h3>
<table>
<thead>
<tr>
<th>描述</th>
<th>名称</th>
</tr>
</thead>
<tbody>
<tr>
<td>数学概念中的整数</td>
<td>int(整数)</td>
</tr>
<tr>
<td>数学概念中的实数</td>
<td>float(浮点数)</td>
</tr>
<tr>
<td>数学概念中的复数</td>
<td>complex(复数)</td>
</tr>
</tbody>
</table>
<h3 id="序列类型">序列类型</h3>
<table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>str(字符串()</td>
<td>字符串是字符的序列表示，用来表示文本信息</td>
</tr>
<tr>
<td>list(列表)</td>
<td>列表用来表示有序的可变元素集合。例如表示一个有序的数据组。</td>
</tr>
<tr>
<td>tuple(元组)</td>
<td>元组用来表示有序的不可变元素集合。</td>
</tr>
</tbody>
</table>
<h3 id="散列类型">散列类型</h3>
<table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>set(集合)</td>
<td>数学概念中的集合，无限不重复元素的集合</td>
</tr>
<tr>
<td>dict(字典)</td>
<td>字典是无序键值对的集合。用来表示有关联的数据，例如表示一个人的基本信息。</td>
</tr>
</tbody>
</table>
<h3 id="其他类型">其他类型</h3>
<table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>bool(布尔型)</td>
<td>bool 型数据只有两个元素，True 表示真，False 表示假。用来表示条件判断结果。</td>
</tr>
<tr>
<td>None</td>
<td>None 表示空。</td>
</tr>
</tbody>
</table>
<h3 id="是否-bool-属于-number-的一种呢">是否 bool 属于 Number 的一种呢？</h3>
<pre><code class="language-python"># 可以将它转成 int 呢？
print(int(True))
print(int(False))

# 输出结果
1
0
</code></pre>
<p>因为 int 能讲 bool 转成整型，True 就是 1，False 就是 0</p>
<h2 id="二-数值类型">二、数值类型</h2>
<h3 id="1-整数类型int">1. 整数类型(int)</h3>
<p>python 中整数类型用 <code>int</code> 表示，与数学中的整数概念一致</p>
<pre><code class="language-python">  age = 18
</code></pre>
<p>其中 age 是变量名，<code>=</code> 是赋值运算符，<code>18</code> 是值。</p>
<p>上面的代码表示创建一个整数 18 然后赋值给变量 age。</p>
<h4 id="1变量">1.变量</h4>
<p>在程序运行过程中会有一些中间值，在稍后的执行中会用到，这时可以将这些中间值赋值给变量，然后在后面的代码中通过调用这些变量名来获取这些值。可以简单的理解为给这些值取一个别名，这个别名就代表这个值。</p>
<p>变量的命名规则：</p>
<ol>
<li>由大小写字母 A-Z a-z，数字 0-9 和下划线 <code>_</code> 组成</li>
<li>不能以数字开头</li>
<li>不能是关键字</li>
<li>变量名大小写敏感</li>
</ol>
<pre><code class="language-python">  # 正确的案例
lucky_num = 88
lucky_num2 = 888
  # 错误的案例
1lucky_num = 88
  # 上面的age 和 Age是两个不同的变量
Age = 19
</code></pre>
<p>python 官方占用了一些变量名作为程序的关键字，总共 35 个，这些关键字不能作为自定义变量名使用。</p>
<pre><code class="language-python">import keyword
print(keyword.kwlist)
</code></pre>
<p>['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']</p>
<h4 id="2赋值运算符">2.赋值运算符</h4>
<p>在 python 中 = 是赋值运算符，而不是数学意义上的等于号。python 解释器会先计算 = 右边的表达式，然后将结果复制给 = 左边的变量。</p>
<pre><code class="language-python">res = 1           # 定义变量res赋值为1
res = res + 1     # 先计算res + 1 再赋值给变量res
res               # res的值为2
</code></pre>
<h4 id="3-type-函数和-print-函数">3. type 函数和 print 函数</h4>
<p>python 提供了内建函数 <code>type</code> 用来查看值或者变量的类型。</p>
<p>只需要将变量或者值作为参数传入 <code>type</code> 函数即可。</p>
<pre><code class="language-python">  type(age)
</code></pre>
<p>int</p>
<pre><code class="language-python">  type(18)
</code></pre>
<p>int</p>
<p><code>print</code> 函数用来在屏幕上输出传入的数据的字符串表现形式，是代码调试最重要的函数。</p>
<pre><code class="language-python">print(age)
print(type(age))
# 注意交互式输出和print函数输出的区别
</code></pre>
<p>运行结果：</p>
<p>18<br>
&lt;class 'int'&gt;</p>
<h4 id="4整数的常见表示形式">4.整数的常见表示形式</h4>
<p>在 python 中整数最常见的是 10 进制整数，也有二进制，八进制和十六进制。</p>
<h5 id="10-进制">10 进制</h5>
<ul>
<li>0,1,2,3,4,5,6,7,8,9</li>
<li>满 10 进 1 位</li>
<li>正常写的 Number 都是 10 进制</li>
</ul>
<pre><code class="language-python">a = 10  # 十进制
print('a的类型为：', type(a), a)
</code></pre>
<p>a 的类型为： &lt;class 'int'&gt; 10</p>
<hr>
<h5 id="2-进制">2 进制</h5>
<ul>
<li>0,1</li>
<li>满 2 进 1 位</li>
</ul>
<pre><code class="language-python">b = 0b1110  # 二进制
print('b的类型为：', type(b),b)
</code></pre>
<p>b 的类型为： &lt;class 'int'&gt; 14</p>
<hr>
<h5 id="8-进制">8 进制</h5>
<ul>
<li>0,1,2,3,4,5,6,7</li>
<li>满 8 进 1 位</li>
</ul>
<pre><code class="language-python">c = 0o57    # 八进制
print('c的类型为：', type(c),c)
</code></pre>
<p>c 的类型为： &lt;class 'int'&gt; 47</p>
<hr>
<h5 id="16-进制">16 进制</h5>
<ul>
<li>0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F</li>
<li>满 16 进 1 位</li>
</ul>
<pre><code class="language-python">d = 0xa5c   # 十六进制
print('d的类型为：', type(d), d)
</code></pre>
<p>d 的类型为： &lt;class 'int'&gt; 2652</p>
<h4 id="int-转成十进制">int() 转成十进制</h4>
<p>int 可以将数字字符串和 Number 类型的值转成整数</p>
<pre><code class="language-python"># 转成十进制
print(0b101)
print(0o777)
print(0xBBB)
print(int(0b101))
print(int(0o777))
print(int(0xBBB))
print(int(&quot;-123&quot;))
print(int(1.1))
print(int(1.9))

# 输出结果
5
511
3003
5
511
3003
-123
1
1
</code></pre>
<ul>
<li>不写 int() 的话，也可以将其他进制的数自动转成十进制</li>
<li>int() 能将纯整数（不能是浮点数）的字符串转成 int 类型</li>
<li>传入浮点数不会进行四舍五入，直接取整数部分</li>
</ul>
<h4 id="bin-其他进制数转二进制">bin() 其他进制数转二进制</h4>
<pre><code class="language-python"># 转成二进制
print(bin(10))  # 10 转成 2进制
print(bin(0o7))  # 7 转成 2进制
print(bin(0xA))  # 10 转成 2进制
print(bin(0o27))  # 8*2+7 转成 2进制
print(bin(0x22E))  # 16^2*2+16*2+14 转成 2进制

# 输出结果
0b1010
0b111
0b1010
0b10111
0b1000101110
</code></pre>
<h4 id="oct-其他进制转成八进制">oct() 其他进制转成八进制</h4>
<pre><code class="language-python"># 转成八进制
print(oct(110))
print(oct(0b100))
print(oct(0xAAA))

# 输出结果
0o156
0o4
0o5252
</code></pre>
<h4 id="hex-其他进制转成十六进制">hex() 其他进制转成十六进制</h4>
<pre><code class="language-python"># 转成十六进制
print(hex(110))
print(hex(0b100))
print(hex(0o777))

# 输出结果
0x6e
0x4
0x1ff
</code></pre>
<h4 id="5整数的取值范围">5.整数的取值范围</h4>
<p>python 中整数类型的理论取值范围是[-无穷，无穷]，实际取值范围受限于运行 python 程序的计算机内存大小。</p>
<h3 id="2-浮点数类型float">2. 浮点数类型(float)</h3>
<p>python 中浮点数数用 float 表示，与数学中的实数概念一致，也可以理解为有小数。</p>
<pre><code class="language-python">a = 0.0
print('a的类型为：', type(a))
</code></pre>
<p>a 的类型为： &lt;class 'float'&gt;</p>
<h4 id="1浮点数的表现形式">1.浮点数的表现形式</h4>
<p>在 python 中浮点数可以表示为 <code>a.b</code> 的格式，也可以表示为小写或大写 <code>E</code> 的科学计算法。例如：</p>
<pre><code class="language-python">a = 0.0
print('a的类型为：', type(a))
</code></pre>
<p>a 的类型为： &lt;class 'float'&gt;</p>
<pre><code class="language-python"># 小数部分为零可以省略不写
b = 76.
print('b的类型为：', type(b))
</code></pre>
<p>b 的类型为： &lt;class 'float'&gt;</p>
<pre><code class="language-python"># 整数部分为0可以省略不写
c = .78
print('b的类型为',:type(c),c)
</code></pre>
<p>c的类型为: &lt;class 'float'&gt; 0.78</p>
<pre><code class="language-python">d = -3.1415926
print('d的类型为：', type(d))
</code></pre>
<p>d 的类型为： &lt;class 'float'&gt;</p>
<pre><code class="language-python">e = 9.5e-2
print('d的类型为：', type(e))
</code></pre>
<p>e的类型为： &lt;class 'float'&gt;</p>
<pre><code class="language-python">f = 9.5e2
print('f的类型为：', type(f),f)
</code></pre>
<p>f的类型为： &lt;class 'float'&gt; 950.0</p>
<h5 id="思考">思考：</h5>
<p>浮点数可以表示所有的整数数值，python 为何要同时提供两种数据类型？</p>
<pre><code>  相同的操作整数要比浮点数快5-20倍
</code></pre>
<h4 id="2数学运算符">2.数学运算符</h4>
<p>与数学中的常用运算符一致</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>+</code></td>
<td>加法运算符 <code>1+1</code></td>
</tr>
<tr>
<td><code>-</code></td>
<td>减法运算符 <code>3-2</code></td>
</tr>
<tr>
<td><code>*</code></td>
<td>乘法运算符 <code>9*9</code></td>
</tr>
<tr>
<td><code>/</code></td>
<td>除法运算符 <code>9/3</code>，除法运算后的结果一定为 <code>float</code> 类型</td>
</tr>
<tr>
<td><code>//</code></td>
<td>整除运算符 <code>10/3</code>，也称为 <code>地板除</code> 向下取整</td>
</tr>
<tr>
<td><code>%</code></td>
<td>取模运算符 <code>10%3</code>，表示 10 除以 3 取余数</td>
</tr>
<tr>
<td><code>**</code></td>
<td>幂次运算符 <code>2**3</code>，表示 2 的 3 次幂</td>
</tr>
<tr>
<td><code>()</code></td>
<td>括号运算符，括号内的表达式先运算 （1+2）* 3</td>
</tr>
</tbody>
</table>
<p>注意一个浮点数和一个整数进行运算后的结果一定为浮点数</p>
<pre><code class="language-python">  2+1.0
</code></pre>
<p>3.0</p>
<pre><code class="language-python">  9/3 # 除法运算的结果一定为float类型
</code></pre>
<p>3.0</p>
<pre><code class="language-python">  9//2 # 地板除，向下取整
</code></pre>
<p>4</p>
<pre><code class="language-python">9.0//2 # 当有浮点数进行运算时，结果一定是浮点数，不管是什么计算符
</code></pre>
<p>4.0</p>
<pre><code class="language-python"># 求模
print(5 % 2)
print(5.1 % 2)

# 输出结果
1
1.0999999999999996
</code></pre>
<ul>
<li>浮点数的求模结果为一堆小数位，而不是 1.1</li>
<li>因为在计算机内存，有的浮点数无法被精确的表示，在这里，只能使用近似值来表示 1.1</li>
</ul>
<pre><code class="language-python"># 幂运算
print(2 ** 3)  # 2 的 3次方
print(1.1 ** 3)  # 1.1 的 3 次方

# 输出结果
8
1.3310000000000004
</code></pre>
<h4 id="3组合赋值运算符">3.组合赋值运算符</h4>
<p>赋值运算符与算术运算符可以组合使用，注意算术运算符要写在前面且中间不能有空格。</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody>
<tr>
<td>=</td>
<td>等于-简单的赋值</td>
<td>c = a + b print(c) # 30</td>
</tr>
<tr>
<td>+=</td>
<td>加等于</td>
<td>c += a 等同于 c = c + a</td>
</tr>
<tr>
<td>-=</td>
<td>减等于</td>
<td>c -= a 等同于 c = c - a</td>
</tr>
<tr>
<td>*=</td>
<td>乘等于</td>
<td>c *= a 等同于 c = c * a</td>
</tr>
<tr>
<td>/=</td>
<td>除等于</td>
<td>c /= a 等同于 c = c/a</td>
</tr>
<tr>
<td>%=</td>
<td>取余等于</td>
<td>c%=a 等同于 c = c%a</td>
</tr>
<tr>
<td>**=</td>
<td>幂等于</td>
<td>c ** =a 等同于 c = c ** a</td>
</tr>
<tr>
<td>//=</td>
<td>取整除等于</td>
<td>c//=a 等同于 c = c//a</td>
</tr>
</tbody>
</table>
<p>体现了程序员的&quot;懒惰&quot;，这种懒惰大力提倡，使得代码简洁和高效。</p>
<pre><code class="language-python">a = 1
a += 2  #  a = a+2
a 
</code></pre>
<p>3</p>
<h4 id="4-浮点数的不精确性">4. 浮点数的不精确性</h4>
<p>整数和浮点数在计算机中的表示不同，python 提供无限制且准确的整数计算，浮点数却是不精确的，例如：</p>
<pre><code class="language-python">  0.2+0.1
</code></pre>
<p>0.30000000000000004<br>
根据 sys.float_info.dig 的值，<strong>计算机只能提供 15 个数字的准确性</strong>。浮点数在超过 15 位数字计算中产生的误差与计算机内部采用二进制运算有关。</p>
<pre><code class="language-python">import sys

print(sys.float_info.dig)
</code></pre>
<p>15</p>
<h5 id="思考-2">思考：</h5>
<p>3.1415926535897924*1.23456789 的计算怎么准确</p>
<h6 id="拓展高精度浮点运算类型">拓展：高精度浮点运算类型</h6>
<pre><code class="language-python">import decimal
a = decimal.Decimal('3.141952653')
b = decimal.Decimal('1.23456789')
print(a * b)
</code></pre>
<p>3.87895385729411217</p>
<h4 id="5-浮点数和整数的相互转化">5. 浮点数和整数的相互转化</h4>
<p><code>int</code>,<code>float</code> 是 python 的内置函数，通过它们可以对浮点数类型和整数类型相互转化</p>
<pre><code class="language-python">a = 1.9
# 转化为整数
# 通过调用int函数，提取浮点数的整数部分
b = int(a)
print(b, type(b))
</code></pre>
<p>1 &lt;class 'int'&gt;</p>
<pre><code class="language-python">c = 2
# 转化为浮点数
# 通过调用float函数，将整数转化为小数部分为0的浮点数
d = float(c)
print(d, type(d))
</code></pre>
<p>2.0 &lt;class 'float'&gt;</p>
<h3 id="3复数">3.复数</h3>
<p>科学计算中的复数。</p>
<pre><code class="language-python">a = 12.3+4j
print('a的类型为：', type(a))
# 运行结果：a的类型为： &lt;class 'complex'&gt;
print(a.real)
print(a.imag)
</code></pre>
<p>a 的类型为： &lt;class 'complex'&gt;<br>
12.3<br>
4.0</p>
]]></content>
    </entry>
</feed>